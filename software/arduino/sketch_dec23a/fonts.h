#ifndef _FONTS_H_
#define _FONTS_H_

#include <stdint.h>

//static inline uint8_t reverse_bits(uint8_t b) {
//  b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
//  b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
//  b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
//  return b;
//}

#define REVERSE_BYTE(b) \
  ((((b * 0x0802LU & 0x22110LU) | (b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16) & 0xFF)

#define RB(v) \
  REVERSE_BYTE(0b ## v)

#define B(v) \
  (0b ## v)

#define REVERSE_WORD(b1, b2) \
  ((REVERSE_BYTE(b1) << 8) | REVERSE_BYTE(b2))


#define RW(x) \
( \
  (REVERSE_BYTE((uint8_t)(B(x) & 0xFF))) | \
  (REVERSE_BYTE((uint8_t)(B(x) >> 8)) << 8) \
)

const uint8_t font_5x5_data[] PROGMEM = 
{
  // SP
  RB(00000000),
  RB(00000000),
  RB(00000000),
  RB(00000000),
  RB(00000000),
  0,
  // !
  RB(00000000),
  RB(00000000),
  RB(00010111),
  RB(00000000),
  RB(00000000),
  0,
  // "
  RB(00000000),
  RB(00000011),
  RB(00000000),
  RB(00000011),
  RB(00000000),
  0,
  // #
  RB(00001010),
  RB(00011111),
  RB(00001010),
  RB(00011111),
  RB(00001010),
  0,
  // $
  RB(00010111),
  RB(00010101),
  RB(00111111),
  RB(00010101),
  RB(00011101),
  0,
  // %
  RB(00010001),
  RB(00001000),
  RB(00000100),
  RB(00000010),
  RB(00010001),
  0,
  // &
  RB(00001010),
  RB(00010101),
  RB(00010101),
  RB(00001000),
  RB(00010100),
  0,
  // '
  RB(00000000),
  RB(00000000),
  RB(00000011),
  RB(00000000),
  RB(00000000),
  0,
  // (
  RB(00000000),
  RB(00001110),
  RB(00010001),
  RB(00000000),
  RB(00000000),
  0,
  // )
  RB(00000000),
  RB(00000000),
  RB(00010001),
  RB(00001110),
  RB(00000000),
  0,
  // *
  RB(00000000),
  RB(00000010),
  RB(00000111),
  RB(00000010),
  RB(00000000),
  0,
  // +
  RB(00000100),
  RB(00000100),
  RB(00011111),
  RB(00000100),
  RB(00000100),
  0,
  // ,
  RB(00000000),
  RB(00000000),
  RB(00011000),
  RB(00000000),
  RB(00000000),
  0,
  // -
  RB(00000100),
  RB(00000100),
  RB(00000100),
  RB(00000100),
  RB(00000100),
  0,
  // .
  RB(00000000),
  RB(00000000),
  RB(00010000),
  RB(00000000),
  RB(00000000),
  0,
  // /
  RB(00000000),
  RB(00011000),
  RB(00000100),
  RB(00000011),
  RB(00000000),
  0,

  // O
  RB(00011111),
  RB(00011001),
  RB(00010101),
  RB(00010011),
  RB(00011111),
  0,
  // 1
  RB(00000000),
  RB(00010010),
  RB(00011111),
  RB(00010000),
  RB(00000000),
  0,
  // 2
  RB(00011001),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00010010),
  0,
  // 3
  RB(00010001),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00011111),
  0,
  // 4
  RB(00000111),
  RB(00000100),
  RB(00000100),
  RB(00011111),
  RB(00000100),
  0,
  // 5
  RB(00010111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00001001),
  0,
  // 6
  RB(00011111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00011101),
  0,
  // 7
  RB(00000001),
  RB(00000001),
  RB(00011001),
  RB(00000101),
  RB(00000011),
  0,
  // 8
  RB(00011111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00011111),
  0,
  // 9
  RB(00010111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00011111),
  0,
  // :
  RB(00000000),
  RB(00000000),
  RB(00001010),
  RB(00000000),
  RB(00000000),
  0,
  // ;
  RB(00000000),
  RB(00000000),
  RB(00011010),
  RB(00000000),
  RB(00000000),
  0,
  // <
  RB(00000000),
  RB(00000100),
  RB(00001010),
  RB(00010001),
  RB(00000000),
  0,
  // >
  RB(00000000),
  RB(00010001),
  RB(00001010),
  RB(00000100),
  RB(00000000),
  0,
  // =
  RB(00001010),
  RB(00001010),
  RB(00001010),
  RB(00001010),
  RB(00001010),
  0,
  // ?
  RB(00000000),
  RB(00000010),
  RB(00000001),
  RB(00010101),
  RB(00000010),
  0,
 
  // @
  RB(00011111),
  RB(00010001),
  RB(00010101),
  RB(00010101),
  RB(00010111),
  0,
  // A
  RB(00011111),
  RB(00000101),
  RB(00000101),
  RB(00000101),
  RB(00011111),
  0,
  // B
  RB(00011111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00001110),
  0,
  // C
  RB(00011111),
  RB(00010001),
  RB(00010001),
  RB(00010001),
  RB(00010001),
  0,
  // D
  RB(00011111),
  RB(00010001),
  RB(00010001),
  RB(00010001),
  RB(00001110),
  0,
  // E
  RB(00011111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00010001),
  0,
  // F
  RB(00011111),
  RB(00000101),
  RB(00000101),
  RB(00000101),
  RB(00000001),
  0,
  // G
  RB(00011111),
  RB(00010001),
  RB(00010101),
  RB(00010101),
  RB(00011101),
  0,
  // H
  RB(00011111),
  RB(00000100),
  RB(00000100),
  RB(00000100),
  RB(00011111),
  0,
  // I
  RB(00010001),
  RB(00010001),
  RB(00011111),
  RB(00010001),
  RB(00010001),
  0,
  // J
  RB(00011001),
  RB(00010001),
  RB(00010001),
  RB(00011111),
  RB(00000001),
  0,
  // K
  RB(00011111),
  RB(00000100),
  RB(00001010),
  RB(00010001),
  RB(00000000),
  0,
  // L
  RB(00011111),
  RB(00010000),
  RB(00010000),
  RB(00010000),
  RB(00010000),
  0,
  // M
  RB(00011111),
  RB(00000010),
  RB(00000100),
  RB(00000010),
  RB(00011111),
  0,
  // N
  RB(00011111),
  RB(00000010),
  RB(00000100),
  RB(00001000),
  RB(00011111),
  0,
  // O
  RB(00011111),
  RB(00010001),
  RB(00010001),
  RB(00010001),
  RB(00011111),
  0,
  // P
  RB(00011111),
  RB(00000101),
  RB(00000101),
  RB(00000101),
  RB(00000111),
  0,
  // Q
  RB(00011111),
  RB(00010001),
  RB(00010001),
  RB(00011001),
  RB(00011111),
  0,
  // R
  RB(00011111),
  RB(00000101),
  RB(00000101),
  RB(00001101),
  RB(00010111),
  0,
  // S
  RB(00010111),
  RB(00010101),
  RB(00010101),
  RB(00010101),
  RB(00011101),
  0,
  // T
  RB(00000001),
  RB(00000001),
  RB(00011111),
  RB(00000001),
  RB(00000001),
  0,
  // U
  RB(00011111),
  RB(00010000),
  RB(00010000),
  RB(00010000),
  RB(00011111),
  0,
  // V
  RB(00000011),
  RB(00001100),
  RB(00010000),
  RB(00001100),
  RB(00000011),
  0,
  // W
  RB(00011111),
  RB(00010000),
  RB(00001000),
  RB(00010000),
  RB(00011111),
  0,
  // X
  RB(00010001),
  RB(00001010),
  RB(00000100),
  RB(00001010),
  RB(00010001),
  0,
  // Y
  RB(00000001),
  RB(00000010),
  RB(00011100),
  RB(00000010),
  RB(00000001),
  0,
  // Z
  RB(00010001),
  RB(00011001),
  RB(00010101),
  RB(00010011),
  RB(00010001),
  0,
  // [
  0, 0, 0, 0, 0, 0,
  // back-/
  0, 0, 0, 0, 0, 0,
  // ]
  0, 0, 0, 0, 0, 0,
  // ^
  0, 0, 0, 0, 0, 0,
  // _
  0, 0, 0, 0, 0, 0,

  // `
  0, 0, 0, 0, 0, 0,
  // a-z
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  // { | } ~
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  //0, 0, 0, 0, 0, 0,
  RB(00011111),
  RB(00011111),
  RB(00011111),
  RB(00011111),
  RB(00011111),
  RB(00011111),
};

const uint8_t font_hw_sign_data[] PROGMEM =
{
  // SP
  0, 0, 0, 0, 0, 0,
  // !
  0, 0, 0, 0, 0, 0,
  // "
  0, 0, 0, 0, 0, 0,
  // #
  0, 0, 0, 0, 0, 0,
  // $
  0, 0, 0, 0, 0, 0,
  // %
  0, 0, 0, 0, 0, 0,
  // &
  0, 0, 0, 0, 0, 0,
  // `
  0, 0, 0, 0, 0, 0,
  // (
  0, 0, 0, 0, 0, 0,
  // )
  0, 0, 0, 0, 0, 0,
  // *
  0, 0, 0, 0, 0, 0,
  // +
  0, 0, 0, 0, 0, 0,
  // ,
  0, 0, 0, 0, 0, 0,
  // -
  0, 0, 0, 0, 0, 0,
  // .
  0, 0, 0, 0, 0, 0,
  // /
  0, 0, 0, 0, 0, 0,
  // 0
  RB(00111110),
  RB(01010001),
  RB(01001001),
  RB(01000101),
  RB(00111110),
  0,
  // 1
  RB(00000000),
  RB(01000010),
  RB(01111111),
  RB(01000000),
  RB(00000000),
  0,
  // 2
  RB(01100010),
  RB(01010001),
  RB(01001001),
  RB(01001001),
  RB(01000110),
  0,
  // 3
  RB(00100010),
  RB(01000001),
  RB(01001001),
  RB(01001001),
  RB(00110110),
  0,
  // 4
  RB(00011000),
  RB(00010100),
  RB(00010010),
  RB(01111111),
  RB(00010000),
  0,
  // 5
  RB(00100111),
  RB(01000101),
  RB(01000101),
  RB(01000101),
  RB(00111001),
  0,
  // 6
  RB(00111100),
  RB(01001010),
  RB(01001001),
  RB(01001001),
  RB(00110000),
  0,
  // 7
  RB(00000001),
  RB(01110001),
  RB(00001001),
  RB(00000101),
  RB(00000011),
  0,
  // 8
  RB(00110110),
  RB(01001001),
  RB(01001001),
  RB(01001001),
  RB(00110110),
  0,
  // 9
  RB(00000110),
  RB(01001001),
  RB(01001001),
  RB(00101001),
  RB(00011110),
  0,
  // :
  0, 0, 0, 0, 0, 0,
  // ;
  0, 0, 0, 0, 0, 0,
  // <
  0, 0, 0, 0, 0, 0,
  // =
  0, 0, 0, 0, 0, 0,
  // >
  0, 0, 0, 0, 0, 0,
  // ?
  0, 0, 0, 0, 0, 0,

  // @
  0, 0, 0, 0, 0, 0,
  // A
  RB(01111100),
  RB(00010010),
  RB(00010001),
  RB(00010010),
  RB(01111100),
  0,
  // B
  RB(01111111),
  RB(01001001),
  RB(01001001),
  RB(01001001),
  RB(00110110),
  0,
  // C
  RB(00111110),
  RB(01000001),
  RB(01000001),
  RB(01000001),
  RB(00100010),
  0,
  // D
  RB(01111111),
  RB(01000001),
  RB(01000001),
  RB(00100010),
  RB(00011100),
  0,
  // E
  RB(01111111),
  RB(01001001),
  RB(01001001),
  RB(01001001),
  RB(01000001),
  0,
  // F
  RB(01111111),
  RB(00001001),
  RB(00001001),
  RB(00001001),
  RB(00000001),
  0,
  // G
  RB(00111110),
  RB(01000001),
  RB(01001001),
  RB(01001001),
  RB(01111010),
  0,
  // H
  RB(01111111),
  RB(00001000),
  RB(00001000),
  RB(00001000),
  RB(01111111),
  0,
  // I
  RB(00000000),
  RB(01000001),
  RB(01111111),
  RB(01000001),
  RB(00000000),
  0,
  // J
  RB(00100000),
  RB(01000000),
  RB(01000001),
  RB(00111111),
  RB(00000001),
  0,
  // K
  RB(01111111),
  RB(00001000),
  RB(00010100),
  RB(00100010),
  RB(01000001),
  0,
  // L
  RB(01111111),
  RB(01000000),
  RB(01000000),
  RB(01000000),
  RB(01000000),
  0,
  // M
  RB(01111111),
  RB(00000010),
  RB(00001100),
  RB(00000010),
  RB(01111111),
  0,
  // N
  RB(01111111),
  RB(00000100),
  RB(00001000),
  RB(00010000),
  RB(01111111),
  0,
  // O
  RB(00111110),
  RB(01000001),
  RB(01000001),
  RB(01000001),
  RB(00111110),
  0,
  // P
  RB(01111111),
  RB(00001001),
  RB(00001001),
  RB(00001001),
  RB(00000110),
  0,
  // Q
  RB(00111110),
  RB(01000001),
  RB(01010001),
  RB(00100001),
  RB(01011110),
  0,
  // R
  RB(01111111),
  RB(00001001),
  RB(00011001),
  RB(00101001),
  RB(01000110),
  0,
  // S
  RB(00100110),
  RB(01001001),
  RB(01001001),
  RB(01001001),
  RB(00110010),
  0,
  // T
  RB(00000001),
  RB(00000001),
  RB(01111111),
  RB(00000001),
  RB(00000001),
  0,
  // U
  RB(00111111),
  RB(01000000),
  RB(01000000),
  RB(01000000),
  RB(00111111),
  0,
  // V
  RB(00000111),
  RB(00011000),
  RB(01100000),
  RB(00011000),
  RB(00000111),
  0,
  // W
  RB(00111111),
  RB(01000000),
  RB(00110000),
  RB(01000000),
  RB(00111111),
  0,
  // X
  RB(01100011),
  RB(00010100),
  RB(00001000),
  RB(00010100),
  RB(01100011),
  0,
  // Y
  RB(00000111),
  RB(00001000),
  RB(01110000),
  RB(00001000),
  RB(00000111),
  0,
  // Z
  RB(01100001),
  RB(01010001),
  RB(01001001),
  RB(01000101),
  RB(01000011),
  0,
  // [
  0, 0, 0, 0, 0, 0,
  // back-/
  0, 0, 0, 0, 0, 0,
  // ]
  0, 0, 0, 0, 0, 0,
  // ^
  0, 0, 0, 0, 0, 0,
  // _
  0, 0, 0, 0, 0, 0,

  // `
  0, 0, 0, 0, 0, 0,
  //a-z
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  // {
  0, 0, 0, 0, 0, 0,
  // |
  0, 0, 0, 0, 0, 0,
  // }
  0, 0, 0, 0, 0, 0,
  // ~
  0, 0, 0, 0, 0, 0,
};

const uint16_t font_dot11_data[] PROGMEM =
{
  // 0
  RW(000001111011110),
  RW(000010000000001),
  RW(000010000000001),
  RW(000010000000001),
  RW(000010000000001),
  RW(000010000000001),
  RW(000001111011110),
  0, 0,
  // 1
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000001111011110),
  0, 0,
  // 2
  RW(000001111000000),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000000000011110),
  0, 0,
  // 3
  RW(000000000000000),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000001111011110),
  0, 0,
  // 4
  RW(000000000011110),
  RW(000000000100000),
  RW(000000000100000),
  RW(000000000100000),
  RW(000000000100000),
  RW(000000000100000),
  RW(000001111011110),
  0, 0,
  // 5
  RW(000000000011110),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000001111000000),
  0, 0,
  // 6
  RW(000001111011110),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000001111000000),
  0, 0,
  // 7
  RW(000000000000000),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000001111011110),
  0, 0,
  // 8
  RW(000001111011110),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000001111011110),
  0, 0,
  // 9
  RW(000000000011110),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000010000100001),
  RW(000001111011110),
  0, 0,
};

const uint16_t font_dot16_data[] PROGMEM = {
  // 0
  RW(011111101111110),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(011111101111110),
  0, 0,
  // 1
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(011111101111110),
  0, 0,
  // 2
  RW(011111100000000),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(000000001111110),
  0, 0,
  // 3
  RW(000000000000000),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111101111110),
  0, 0,
  // 4
  RW(000000001111110),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(011111101111110),
  0, 0,
  // 5
  RW(000000001111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111100000000),
  0, 0,
  // 6
  RW(011111101111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111100000000),
  0, 0,
  // 7
  RW(000000000000000),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(011111101111110),
  0, 0,
  // 8
  RW(011111101111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111101111110),
  0, 0,
  // 9
  RW(000000001111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111101111110),
  0, 0,
};

const uint16_t font_dot16_w_data[] PROGMEM = {
  // 0
  RW(011111101111110),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(100000000000001),
  RW(011111101111110),
  0, 0,
  // 1
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(000000000000000),
  RW(011111101111110),
  0, 0,
  // 2
  RW(011111100000000),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(000000001111110),
  0, 0,
  // 3
  RW(000000000000000),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111101111110),
  0, 0,
  // 4
  RW(000000001111110),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(000000010000000),
  RW(011111101111110),
  0, 0,
  // 5
  RW(000000001111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111100000000),
  0, 0,
  // 6
  RW(011111101111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111100000000),
  0, 0,
  // 7
  RW(000000000000000),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(000000000000001),
  RW(011111101111110),
  0, 0,
  // 8
  RW(011111101111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111101111110),
  0, 0,
  // 9
  RW(000000001111110),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(100000010000001),
  RW(011111101111110),
  0, 0,
};

const uint8_t font_hbar_data[] PROGMEM =
{
  // 0
  RB(00111111),
  // 1
  RB(00100001),
};

const uint16_t font_sbar_data[] PROGMEM =
{
  // 0
  RW(0000000000000000),
  RW(0000000000000000),
  RW(0000000000000000),
  RW(0000000000000000),
  // 1
  RW(1000000000000000),
  RW(1000000000000000),
  RW(1000000000000000),
  RW(1000000000000000),
  // 2
  RW(1100000000000000),
  RW(1100000000000000),
  RW(1100000000000000),
  RW(1100000000000000),
  // 3
  RW(1110000000000000),
  RW(1110000000000000),
  RW(1110000000000000),
  RW(1110000000000000),
  // 4
  RW(1111000000000000),
  RW(1111000000000000),
  RW(1111000000000000),
  RW(1111000000000000),
  // 5
  RW(1111100000000000),
  RW(1111100000000000),
  RW(1111100000000000),
  RW(1111100000000000),
  // 6
  RW(1111110000000000),
  RW(1111110000000000),
  RW(1111110000000000),
  RW(1111110000000000),
  // 7
  RW(1111111000000000),
  RW(1111111000000000),
  RW(1111111000000000),
  RW(1111111000000000),
  // 8
  RW(1111111100000000),
  RW(1111111100000000),
  RW(1111111100000000),
  RW(1111111100000000),
  // 9
  RW(1111111110000000),
  RW(1111111110000000),
  RW(1111111110000000),
  RW(1111111110000000),
  // 10
  RW(1111111111000000),
  RW(1111111111000000),
  RW(1111111111000000),
  RW(1111111111000000),
  // 11
  RW(1111111111100000),
  RW(1111111111100000),
  RW(1111111111100000),
  RW(1111111111100000),
  // 12
  RW(1111111111110000),
  RW(1111111111110000),
  RW(1111111111110000),
  RW(1111111111110000),
  // 13
  RW(1111111111111000),
  RW(1111111111111000),
  RW(1111111111111000),
  RW(1111111111111000),
  // 14
  RW(1111111111111100),
  RW(1111111111111100),
  RW(1111111111111100),
  RW(1111111111111100),
  // 15
  RW(1111111111111110),
  RW(1111111111111110),
  RW(1111111111111110),
  RW(1111111111111110),
  // 16
  RW(1111111111111111),
  RW(1111111111111111),
  RW(1111111111111111),
  RW(1111111111111111),
};

template<typename T>
struct FontT
{
  int width;
  int height;
  bool is_digits;
  const T *data;
};

typedef FontT<uint8_t> Font;
typedef FontT<uint16_t> FontBig;

Font FONT_5x5 =
{
  .width = 5 + 1,
  .height = 5,
  .is_digits = false,
  .data = font_5x5_data
};

Font font_hw_sign =
{
  .width = 5 + 1,
  .height = 6,
  .is_digits = false,
  .data = font_hw_sign_data
};

Font font_hbar =
{
  .width = 1,
  .height = 6,
  .is_digits = true,
  .data = font_hbar_data
};

FontBig font_sbar =
{
  .width = 4,
  .height = 16,
  .is_digits = true,
  .data = font_sbar_data
};

FontBig font_dot11 =
{
  .width = 7 + 2,
  .height = 11,
  .is_digits = true,
  .data = font_dot11_data
};

FontBig font_dot16 =
{
  .width = 7 + 2,
  .height = 16,
  .is_digits = true,
  .data = font_dot16_data
};

FontBig font_dot16_w =
{
  .width = 9 + 2,
  .height = 16,
  .is_digits = true,
  .data = font_dot16_w_data
};

void
font_write(const Font *font, int16_t x, int16_t y, const char *str)
{
  uint64_t   *scr;
  int16_t     y_int,
              y_frac;
  int         i;
  unsigned    j;
  uint8_t     b;
  char        ch;
  union
  {
    uint64_t  u64;
    uint8_t   u8[8];
  } cast;

  scr = (uint64_t *) screen_buf;
  y_int = y / 8;
  y_frac = y % 8;

  for (j = 0; j != strlen(str); ++j)
  {
    for (i = 0; i != font->width; ++i)
    {
      if (x >= 0 && x < 255)
      {
        ch = str[j];

        if (font->is_digits)
          ch -= '0';
        else
          ch -= ' ';

        b = pgm_read_byte(&font->data[ch * font->width + i]);

        cast.u64 = 0;
        cast.u8[0 + y_int] |= b >> y_frac;
        cast.u8[1 + y_int] |= b << (8 - y_frac);
        
        scr[x] |= cast.u64;
      }
      
      if (++x > 256)
        break;
    }
  }
}

void
font_write(const FontBig *font, int16_t x, int16_t y, const char *str)
{
  uint64_t   *scr;
  int16_t     y_int,
              y_frac;
  int         i;
  unsigned    j;
  char        ch;
  union
  {
    uint64_t  u64;
    uint8_t   u8[8];
  } cast;
  union
  {
    uint16_t u16;
    uint8_t u8[2];
  } tag;

  scr = (uint64_t *) screen_buf;
  y_int = y / 8;
  y_frac = y % 8;

  for (j = 0; j != strlen(str); ++j)
  {
    for (i = 0; i != font->width; ++i)
    {
      if (x >= 0 && x < 255)
      {
        ch = str[j];

        if (font->is_digits)
          ch -= '0';
        else
          ch -= ' ';

/*        if (font->is_upper_only)
          ch = toupper((unsigned char) ch);
          
        if (isdigit(ch))
        {
          if (!font->is_digits)
            return;

          ch -= '0';
        }
        else
        {
          ch -= 'A';
          ch += 10;
        }
*/
        tag.u16 = pgm_read_word(&font->data[ch * font->width + i]);

        cast.u64 = 0;
        cast.u8[0 + y_int] |= tag.u8[0] >> y_frac;
        cast.u8[1 + y_int] |= tag.u8[0] << (8 - y_frac);
        cast.u8[1 + y_int] |= tag.u8[1] >> y_frac;
        cast.u8[2 + y_int] |= tag.u8[1] << (8 - y_frac);
        
        scr[x] |= cast.u64;
      }
      
      if (++x > 256)
        break;
    }
  }
}

template <typename T>
void
font_write(const T *font, int16_t x, int16_t y, uint32_t val)
{
  char buf[12];

  snprintf(buf, sizeof(buf), "%" PRIu32 "", val);
  font_write(font, x, y, buf);
}

static inline int
digit_width(uint32_t val)
{
  int i;

  if (val == 0)
    return 1;

  for (i = 0; val /= 10; ++i);

  return i;
}

static inline int
font_middle(uint32_t val)
{
  int w = digit_width(val);
  return (w + 1) * 6 / 2 - 1;
}

#endif /* _FONTS_H_ */
