#!/usr/local/bin/python3

import os
import sys
import numpy as np
import argparse as ap
import datetime as dt

from PIL import Image
from numpy import asarray
from pathlib import Path

def generate_header():
	''' Generate header '''
	print('''/*-------------------------------------------------------------------------
 *
 * NOTES
 *  ******************************
 *  *** DO NOT EDIT THIS FILE! ***
 *  ******************************
 *
 *  It has been GENERATED {}
 *
 *-------------------------------------------------------------------------
 */
'''.format(dt.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
)
	print('''#pragma once

#include <avr/io.h>
#include <avr/pgmspace.h>
#include <stdint.h>

#include "sprite.h"
''')


def generate(filename):
	''' Make cpp file from image '''

	img = Image.open(filename)
	width, height = img.size

	name = Path(filename).stem

	raw = asarray(img)

	raw = np.add.reduce(raw, axis = 2)
	vis = lambda px: 1 if px else 0
	fn = np.vectorize(vis)
	raw = fn(raw)

	print(f'/* {name} */')

	print(f'static const uint8_t {name}_data[] PROGMEM = ' + '{')
	for i in range(width):
		a = np.array(np.packbits(raw[:, i], bitorder='big'))
		base_v = np.vectorize(np.base_repr)
		padded = np.char.rjust(base_v(a, 16), 2, '0')
		result = np.char.add('0x', padded)

		print('\t' + ', '.join(result) + ',')
	print(r'};')
	print()

	print(f'static const Sprite {name} = ' + '{')
	print(f'\t.width\t= {width},')
	print(f'\t.height\t= {height},')
	print(f'\t.data\t= {name}_data,')
	print(r'};')
	print()


if __name__=='__main__':
	parser = ap.ArgumentParser(description='Process image files into CPP.')
	parser.add_argument('img', metavar='image', type=str, nargs='+',
						help='image to process')

	args = parser.parse_args()

	for img in args.img:
		check_file = os.path.isfile(img)
		if not check_file:
			print(f"File {img} doen't exist!", file=sys.stderr)
			sys.exit(1)

	generate_header()
	for img in args.img:
		generate(img)
